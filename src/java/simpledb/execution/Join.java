package simpledb.execution;

import simpledb.common.Type;
import simpledb.storage.DbFileIterator;
import simpledb.storage.IntField;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate joinPredicate;
    private  OpIterator child1;
    private  OpIterator child2;

    private Tuple tuple1;
    private int state = 0;
    private final List<Tuple> cache = new ArrayList<>();
    private TupleDesc tupleDesc;
    private boolean cacheAvailable = false;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int field1 = joinPredicate.getField1();
        String fieldName = this.child1.getTupleDesc().getFieldName(field1);
        return fieldName;

    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int field2 = joinPredicate.getField2();
        String fieldName = this.child2.getTupleDesc().getFieldName(field2);
        return fieldName;
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here

        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
//        if (child1.hasNext()){
//            left = child1.next();
//        }
//        if (child2.hasNext()){
//            right = child2.next();
//        }
        tuple1 = child1.hasNext()? child1.next() : null;
        state = 0;
    }

    public void close() {
        child2.close();
        child1.close();
//        left =null;
//        right = null;
        super.close();
        // some code goes here
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
        tuple1 = child1.hasNext()? child1.next() : null;
        state = 0;
    }


//    private Tuple left;
//    private Tuple right;
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (!cacheAvailable){
            final Tuple tuple = doFetchNext();
            if (cache.size()<= state){
                cache.add(tuple);
            }
        }
        if (null == cache.get(state)) {
            cacheAvailable = true;
            return null;
        } else {
            return cache.get(state++);
        }
    }

    private Tuple doFetchNext() throws DbException, TransactionAbortedException {
        if (tuple1 ==null){
            return  null;
        }
        while (true){
            while (!child2.hasNext()){
                if (child1.hasNext()){
                    tuple1 = child1.next();
                    child2.rewind();
                }else {
                    tuple1 = null;
                    return null;
                }
            }
            Tuple tuple2 = child2.next();
            if (joinPredicate.filter(tuple1,tuple2)){
                Tuple tuple = new Tuple(getTupleDesc());
                int i = 0;
                for (int j = 0; j < child1.getTupleDesc().numFields();j++){
                    tuple.setField(i++,tuple1.getField(j));
                }
                for (int j = 0; j < child2.getTupleDesc().numFields();j++){
                    tuple.setField(i++,tuple2.getField(j));
                }
                return tuple;
            }
        }
    }
    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1,child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
